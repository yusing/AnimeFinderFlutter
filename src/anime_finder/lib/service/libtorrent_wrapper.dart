// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, unused_field, unused_element
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libtorrent-rasterbar dart wrapper
class LibTorrent {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibTorrent(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibTorrent.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> print_queue_last() {
    return _print_queue_last();
  }

  late final _print_queue_lastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'lt_print_queue_last');
  late final _print_queue_last =
      _print_queue_lastPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void pop_print_queue() {
    return _pop_print_queue();
  }

  late final _pop_print_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('lt_pop_print_queue');
  late final _pop_print_queue =
      _pop_print_queuePtr.asFunction<void Function()>();

  int cache_used() {
    return _cache_used();
  }

  late final _cache_usedPtr =
      _lookup<ffi.NativeFunction<ptrdiff_t Function()>>('lt_cache_used');
  late final _cache_used = _cache_usedPtr.asFunction<int Function()>();

  double cache_used_percentage() {
    return _cache_used_percentage();
  }

  late final _cache_used_percentagePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'lt_cache_used_percentage');
  late final _cache_used_percentage =
      _cache_used_percentagePtr.asFunction<double Function()>();

  void add_torrent(
    ffi.Pointer<ffi.Char> magnet_url,
    ffi.Pointer<ffi.Char> save_path,
    bool is_torrent_file,
  ) {
    return _add_torrent(
      magnet_url,
      save_path,
      is_torrent_file,
    );
  }

  late final _add_torrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('lt_add_torrent');
  late final _add_torrent = _add_torrentPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  void init_session(
    ffi.Pointer<ffi.Char> db_path,
  ) {
    return _init_session(
      db_path,
    );
  }

  late final _init_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'lt_init_session');
  late final _init_session =
      _init_sessionPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int n_torrents() {
    return _n_torrents();
  }

  late final _n_torrentsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('lt_n_torrents');
  late final _n_torrents = _n_torrentsPtr.asFunction<int Function()>();

  bool need_update() {
    return _need_update();
  }

  late final _need_updatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('lt_need_update');
  late final _need_update = _need_updatePtr.asFunction<bool Function()>();

  void updated() {
    return _updated();
  }

  late final _updatedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('lt_updated');
  late final _updated = _updatedPtr.asFunction<void Function()>();

  ffi.Pointer<torrent_result> query_torrent(
    int torrent_index,
  ) {
    return _query_torrent(
      torrent_index,
    );
  }

  late final _query_torrentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<torrent_result> Function(ffi.Size)>>(
      'lt_query_torrent');
  late final _query_torrent =
      _query_torrentPtr.asFunction<ffi.Pointer<torrent_result> Function(int)>();

  void pause_torrent(
    int torrent_index,
  ) {
    return _pause_torrent(
      torrent_index,
    );
  }

  late final _pause_torrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Size)>>(
          'lt_pause_torrent');
  late final _pause_torrent =
      _pause_torrentPtr.asFunction<void Function(int)>();

  void resume_torrent(
    int torrent_index,
  ) {
    return _resume_torrent(
      torrent_index,
    );
  }

  late final _resume_torrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Size)>>(
          'lt_resume_torrent');
  late final _resume_torrent =
      _resume_torrentPtr.asFunction<void Function(int)>();

  void remove_torrent(
    int torrent_index,
  ) {
    return _remove_torrent(
      torrent_index,
    );
  }

  late final _remove_torrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Size)>>(
          'lt_remove_torrent');
  late final _remove_torrent =
      _remove_torrentPtr.asFunction<void Function(int)>();

  ffi.Pointer<files_result> query_files(
    int torrent_index,
  ) {
    return _query_files(
      torrent_index,
    );
  }

  late final _query_filesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<files_result> Function(ffi.Size)>>(
          'lt_query_files');
  late final _query_files =
      _query_filesPtr.asFunction<ffi.Pointer<files_result> Function(int)>();

  ffi.Pointer<file_result> query_file(
    ffi.Pointer<files_result> query,
    int index,
  ) {
    return _query_file(
      query,
      index,
    );
  }

  late final _query_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<file_result> Function(
              ffi.Pointer<files_result>, ffi.Int32)>>('lt_query_file');
  late final _query_file = _query_filePtr.asFunction<
      ffi.Pointer<file_result> Function(ffi.Pointer<files_result>, int)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Long;

class torrent_result extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> save_path;

  external ffi.Pointer<ffi.Char> state;

  @ffi.Float()
  external double progress;

  @ffi.Int64()
  external int total_size;

  @ffi.Int()
  external int download_rate;

  @ffi.Bool()
  external bool paused;

  @ffi.Bool()
  external bool finished;
}

class files_result extends ffi.Struct {
  external ffi.Pointer<ffi.Void> p_torrent_info;

  @ffi.Int()
  external int n_files;
}

class file_result extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> path;

  @ffi.Int64()
  external int size;
}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;
