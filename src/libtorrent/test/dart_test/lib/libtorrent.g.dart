// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, unused_field, unused_element
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libtorrent-rasterbar dart wrapper
class LibTorrent {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibTorrent(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibTorrent.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<TorrentList> get_torrents() {
    return _get_torrents();
  }

  late final _get_torrentsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TorrentList> Function()>>(
          'lt_get_torrents');
  late final _get_torrents =
      _get_torrentsPtr.asFunction<ffi.Pointer<TorrentList> Function()>();

  void free_file(
    ffi.Pointer<FileInfo> p_file,
  ) {
    return _free_file(
      p_file,
    );
  }

  late final _free_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FileInfo>)>>(
          'lt_free_file');
  late final _free_file =
      _free_filePtr.asFunction<void Function(ffi.Pointer<FileInfo>)>();

  void free_torrent_content(
    ffi.Pointer<Torrent> p_torrent,
  ) {
    return _free_torrent_content(
      p_torrent,
    );
  }

  late final _free_torrent_contentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Torrent>)>>(
          'lt_free_torrent_content');
  late final _free_torrent_content = _free_torrent_contentPtr
      .asFunction<void Function(ffi.Pointer<Torrent>)>();

  void free_torrent(
    ffi.Pointer<Torrent> p_torrent,
  ) {
    return _free_torrent(
      p_torrent,
    );
  }

  late final _free_torrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Torrent>)>>(
          'lt_free_torrent');
  late final _free_torrent =
      _free_torrentPtr.asFunction<void Function(ffi.Pointer<Torrent>)>();

  void free_torrents(
    ffi.Pointer<TorrentList> p_torrent_list,
  ) {
    return _free_torrents(
      p_torrent_list,
    );
  }

  late final _free_torrentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TorrentList>)>>(
          'lt_free_torrents');
  late final _free_torrents =
      _free_torrentsPtr.asFunction<void Function(ffi.Pointer<TorrentList>)>();

  ffi.Pointer<ffi.Char> pause_torrent(
    ffi.Pointer<ffi.Char> torrent_hash,
  ) {
    return _pause_torrent(
      torrent_hash,
    );
  }

  late final _pause_torrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('lt_pause_torrent');
  late final _pause_torrent = _pause_torrentPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> resume_torrent(
    ffi.Pointer<ffi.Char> torrent_hash,
  ) {
    return _resume_torrent(
      torrent_hash,
    );
  }

  late final _resume_torrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('lt_resume_torrent');
  late final _resume_torrent = _resume_torrentPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> remove_torrent_delete_files(
    ffi.Pointer<ffi.Char> torrent_hash,
  ) {
    return _remove_torrent_delete_files(
      torrent_hash,
    );
  }

  late final _remove_torrent_delete_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('lt_remove_torrent_delete_files');
  late final _remove_torrent_delete_files = _remove_torrent_delete_filesPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<Torrent> add_torrent(
    ffi.Pointer<ffi.Char> magnet_uri,
    ffi.Pointer<ffi.Char> save_path,
  ) {
    return _add_torrent(
      magnet_uri,
      save_path,
    );
  }

  late final _add_torrentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Torrent> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('lt_add_torrent');
  late final _add_torrent = _add_torrentPtr.asFunction<
      ffi.Pointer<Torrent> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> torrent_state(
    int state,
  ) {
    return _torrent_state(
      state,
    );
  }

  late final _torrent_statePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'lt_torrent_state');
  late final _torrent_state =
      _torrent_statePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void init_session() {
    return _init_session();
  }

  late final _init_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('lt_init_session');
  late final _init_session = _init_sessionPtr.asFunction<void Function()>();

  void update_torrent(
    ffi.Pointer<Torrent> p_torrent,
  ) {
    return _update_torrent(
      p_torrent,
    );
  }

  late final _update_torrentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Torrent>)>>(
          'lt_update_torrent');
  late final _update_torrent =
      _update_torrentPtr.asFunction<void Function(ffi.Pointer<Torrent>)>();

  void free_alert(
    ffi.Pointer<Alert> p_alert,
  ) {
    return _free_alert(
      p_alert,
    );
  }

  late final _free_alertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Alert>)>>(
          'lt_free_alert');
  late final _free_alert =
      _free_alertPtr.asFunction<void Function(ffi.Pointer<Alert>)>();

  ffi.Pointer<ffi.Char> alert_type(
    ffi.Pointer<Alert> p_alert,
  ) {
    return _alert_type(
      p_alert,
    );
  }

  late final _alert_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<Alert>)>>('lt_alert_type');
  late final _alert_type = _alert_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<Alert>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

class FileInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int64()
  external int file_size;
}

class Torrent extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> hash;

  @ffi.Int()
  external int state;

  external ffi.Pointer<ffi.Char> save_path;

  @ffi.Double()
  external double progress;

  @ffi.Int64()
  external int total_file_size;

  @ffi.Int()
  external int download_rate;

  @ffi.Double()
  external double eta;

  @ffi.Uint8()
  external int is_paused;

  @ffi.Uint8()
  external int is_finished;

  external ffi.Pointer<FileInfo> p_files;

  @ffi.Int()
  external int n_files;
}

class TorrentList extends ffi.Struct {
  external ffi.Pointer<Torrent> arr_torrents;

  @ffi.Int()
  external int n_torrents;
}

class Alert extends ffi.Struct {
  external ffi.Pointer<ffi.Char> message;

  @ffi.Uint32()
  external int category;

  external ffi.Pointer<ffi.Char> what;
}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;
